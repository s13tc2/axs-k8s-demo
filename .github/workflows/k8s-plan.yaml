name: k8s-Plan
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

env:
  TERRAFORM_VERSION: '1.5.7'

jobs:
  infra:
    runs-on: ubuntu-latest
    outputs:
      kubernetes_cluster_name: ${{ steps.apply.outputs.kubernetes_cluster_name }}
      primary_region: ${{ steps.apply.outputs.primary_region }}
      alb_controller_role: ${{ steps.apply.outputs.alb_controller_role }}
      workload_identity_role: ${{ steps.apply.outputs.workload_identity_role }}
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - id: apply
        name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKEND_BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          BACKEND_REGION: ${{ vars.BUCKET_REGION }}
          BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
          working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
          run: |
            # Initialize Terraform
            terraform init \
              -backend-config="bucket=$BACKEND_BUCKET_NAME" \
              -backend-config="region=$BACKEND_REGION" \
              -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}"
            
            # Apply terraform in stages
            terraform apply -target "random_shuffle.az" -auto-approve
            terraform apply -auto-approve
            
            # Function to safely get and clean terraform outputs
            get_output() {
              terraform output -raw "$1" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
            }
            
            # Get and store all outputs
            CLUSTER_NAME=$(get_output "kubernetes_cluster_name")
            ALB_ROLE=$(get_output "alb_controller_role")
            WORKLOAD_ROLE=$(get_output "workload_identity_role")
            REGION=$(get_output "primary_region")
            
            # Debug prints
            echo "Debug - Output values:"
            echo "Cluster Name: '$CLUSTER_NAME'"
            echo "ALB Role: '$ALB_ROLE'"
            echo "Workload Role: '$WORKLOAD_ROLE'"
            echo "Region: '$REGION'"
            
            # Set the outputs with proper spacing
            {
              echo "kubernetes_cluster_name=$CLUSTER_NAME"
              echo "alb_controller_role=$ALB_ROLE"
              echo "workload_identity_role=$WORKLOAD_ROLE"
              echo "primary_region=$REGION"
            } >> "$GITHUB_OUTPUT"
            
            # Verify outputs were set correctly
            echo "Verification - Contents of GITHUB_OUTPUT:"
            cat "$GITHUB_OUTPUT"

  k8s:
    runs-on: ubuntu-latest
    needs: infra
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - id: plan
        name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKEND_BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          BACKEND_REGION: ${{ vars.BUCKET_REGION }}
          BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
          TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
          TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
          TF_VAR_cluster_name: ${{ needs.infra.outputs.kubernetes_cluster_name }}
          TF_VAR_primary_region: ${{ needs.infra.outputs.primary_region }}
          TF_VAR_alb_controller_role: ${{ needs.infra.outputs.alb_controller_role }}
          TF_VAR_workload_identity_role: ${{ needs.infra.outputs.workload_identity_role }}
          TF_VAR_secret_name: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-connection-string
          TF_VAR_secret_key: ${{ secrets.DB_CONNECTION_STRING_KEY }}
        working-directory: ./src/terraform/k8s
        run: |
          terraform init \
            -backend-config='bucket='$BACKEND_BUCKET_NAME \
            -backend-config='region='$BACKEND_REGION \
            -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-k8s"
          terraform plan