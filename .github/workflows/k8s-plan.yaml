name: k8s-Plan
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

env:
  TERRAFORM_VERSION: '1.5.7'

jobs:
  infra:
    runs-on: ubuntu-latest
    outputs:
      kubernetes_cluster_name: ${{ steps.apply.outputs.kubernetes_cluster_name }}
      primary_region: ${{ steps.apply.outputs.primary_region }}
      alb_controller_role: ${{ steps.apply.outputs.alb_controller_role }}
      workload_identity_role: ${{ steps.apply.outputs.workload_identity_role }}
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - id: apply
        name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKEND_BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          BACKEND_REGION: ${{ vars.BUCKET_REGION }}
          BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
        working-directory: ${{ vars.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config='bucket='$BACKEND_BUCKET_NAME \
            -backend-config='region='$BACKEND_REGION \
            -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}"
          terraform apply -target "random_shuffle.az" -auto-approve
          terraform apply -auto-approve
          
          echo "Debug: Listing all terraform outputs"
          terraform output
          
          if CLUSTER_NAME=$(terraform output -raw kubernetes_cluster_name 2>/dev/null); then
            echo "kubernetes_cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
            echo "Debug: Successfully got cluster name: $CLUSTER_NAME"
          else
            echo "Warning: Failed to get kubernetes_cluster_name"
          fi
          
          if REGION=$(terraform output -raw primary_region 2>/dev/null); then
            echo "primary_region=$REGION" >> $GITHUB_OUTPUT
            echo "Debug: Successfully got region: $REGION"
          else
            echo "Warning: Failed to get primary_region"
          fi
          
          if ALB_ROLE=$(terraform output -raw alb_controller_role 2>/dev/null); then
            echo "alb_controller_role=$ALB_ROLE" >> $GITHUB_OUTPUT
            echo "Debug: Successfully got ALB role: $ALB_ROLE"
          else
            echo "Warning: Failed to get alb_controller_role"
          fi
          
          if WORKLOAD_ROLE=$(terraform output -raw workload_identity_role 2>/dev/null); then
            echo "workload_identity_role=$WORKLOAD_ROLE" >> $GITHUB_OUTPUT
            echo "Debug: Successfully got workload role: $WORKLOAD_ROLE"
          else
            echo "Warning: Failed to get workload_identity_role"
          fi

  k8s:
    runs-on: ubuntu-latest
    needs: infra
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - id: debug-outputs
        name: Debug Outputs
        run: |
          echo "Debug: Checking received outputs"
          echo "Cluster Name: ${{ needs.infra.outputs.kubernetes_cluster_name }}"
          echo "Region: ${{ needs.infra.outputs.primary_region }}"
          echo "ALB Role: ${{ needs.infra.outputs.alb_controller_role }}"
          echo "Workload Role: ${{ needs.infra.outputs.workload_identity_role }}"
          
      - id: plan
        name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKEND_BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          BACKEND_REGION: ${{ vars.BUCKET_REGION }}
          BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
          TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
          TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
          TF_VAR_cluster_name: ${{ needs.infra.outputs.kubernetes_cluster_name }}
          TF_VAR_primary_region: ${{ needs.apply.outputs.primary_region  }}
          TF_VAR_alb_controller_role: ${{ needs.infra.outputs.alb_controller_role }}
          TF_VAR_workload_identity_role: ${{ needs.infra.outputs.workload_identity_role }}
          TF_VAR_secret_name: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-connection-string
          TF_VAR_secret_key: ${{ secrets.DB_CONNECTION_STRING_KEY }}
        working-directory: ./src/terraform/k8s
        run: |
          terraform init \
            -backend-config='bucket='$BACKEND_BUCKET_NAME \
            -backend-config='region='$BACKEND_REGION \
            -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-k8s"
          terraform plan